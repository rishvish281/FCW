from django.shortcuts import render
import tensorflow as tf

import os

from django.utils.datastructures import MultiValueDictKeyError

print("k\nk\nk\nk\nk\nk\nk\n")
model = tf.keras.models.load_model('my_model_05.keras')

def preprocess_image(image_path):
    img = tf.keras.utils.load_img(image_path, target_size=(180, 180))
    img_array = tf.keras.utils.img_to_array(img)
    img_array = tf.expand_dims(img_array, 0)  # Create a batch of 1 image
    return img_array

# Create your views here.
def home(request):
    try:
        # Assuming your file input field is named 'image_pred'
        uploaded_file = request.FILES['image_pred']

        # Set the path to save the uploaded image in the "uploads" folder
        upload_folder = 'uploads/'
        os.makedirs(upload_folder, exist_ok=True)  # Create the folder if it doesn't exist

        # Set the path to save the uploaded image
        img_path = os.path.join(upload_folder, 'uploaded_image.jpg')

        with open(img_path, 'wb') as destination:
            for chunk in uploaded_file.chunks():
                destination.write(chunk)

        # Preprocess the image for model prediction
        img_array = preprocess_image(img_path)


        with open('folder_names.txt', 'r') as file:
            class_names = file.read().splitlines()

        # Make predictions using the loaded model
        predictions = model.predict(img_array)
        predicted_class_index = tf.argmax(predictions, axis=1)
        predicted_class_name = class_names[predicted_class_index[0]]

    except MultiValueDictKeyError:
        # Handle the case where 'image_pred' is not present in request.FILES
        uploaded_file = None
        predicted_class_name = None

    import json
    import requests
    if request.method == 'POST':
        if predicted_class_name == None:
            query = request.POST['query']
        else:
            query = predicted_class_name
        api_url = 'https://api.api-ninjas.com/v1/nutrition?query='
        api_request = requests.get(
            api_url + query, headers={'X-Api-Key': '38qpCvQ6wfRTy+0eTS4H4Q==E0LFGKc7SgyxSXOB'})
        try:
            api = json.loads(api_request.content)
            print(api_request.content)
        except Exception as e:
            api = "oops! There was an error"
            print(e)
        return render(request, 'home.html', {'api': api})
    else:
        return render(request, 'home.html', {'query': 'Enter a valid query'})
